@using BlazorDownloadFile
@using StarGlyph
@using Svg
@using System.Xml

@inject IBlazorDownloadFileService Download

@page "/"

<PageTitle>StarGlyph</PageTitle>

<div class="my-2 mx-4">
    <MudGrid Spacing=2>
        <MudItem Class=" flex-grow-1">
            <MudPaper class="relative pa-4" Height=100% Outlined="true">
                @*zoom and download*@
                @*<div class="topleft">
                    <MudFab OnClick=@(()=>zoom=MathF.Min(maxZoom, zoom*2))
                        Color="Color.Secondary" Size=Size.Small Icon="@Icons.Material.Filled.Add"/>

                    <MudText Inline=true Typo=Typo.body1 Class="mx-1">@zoom%</MudText>

                    <MudFab OnClick=@(()=>zoom=MathF.Max(minZoom, zoom/2))
                        Color="Color.Secondary" Size=Size.Small Icon="@Icons.Material.Filled.Remove"/> 
                </div>*@

                <div class="topright">
                    <MudFab OnClick=DownloadDocument
                        Color="Color.Secondary" Size=Size.Medium Icon="@Icons.Material.Filled.Download"/>
                </div>

                @*svg*@
                @*can't find a way to make it fill all the avaiable height*@
                <div>
                    <svg class="svgViewer" height=80vh>
                        @((MarkupString)(documentContent ?? ""))
                    </svg>
                </div>

            </MudPaper>
        </MudItem>
    
        <MudItem xs=5>
            @*Options*@
            <MudExpansionPanels Class="mb-4">
                <MudExpansionPanel Text="Options">
                    <div Class="d-flex flex-row">
                        <MudText Typo=Typo.body1 Class="my-2 mr-2">Style:</MudText>
                        <MudChipSet Filter="true" Mandatory=true SelectedChipChanged=UpdateStyle>
                            <MudChip Text="Default" Color=Color.Primary Default=true/>
                            <MudChip Text="Strikethrough" Color=Color.Primary/>
                        </MudChipSet>
                     </div>

                    <MudTextField T=int Label="Max line length" Immediate=true
                        Value=@maxLineLength ValueChanged=@((x)=>{maxLineLength=x;options = options with {maxLineLength=x};UpdateDocument();})
                        Adornment=Adornment.End AdornmentIcon=@Icons.Material.Outlined.Calculate/>
                    <MudTextField T=int Label="Max words per line" Immediate=true
                        Value=@maxWordsPerLine ValueChanged=@((x)=>{maxWordsPerLine=x;options = options with {maxWordsPerLine=x};UpdateDocument();})
                        Adornment=Adornment.End AdornmentIcon=@Icons.Material.Outlined.Calculate/>
                    @*<MudCheckBox Label="Allow invalid characters"/>*@
                </MudExpansionPanel>
            </MudExpansionPanels>

            <MudTextField @bind-Value=input Variant=Variant.Outlined Label="Input text" Lines="10" Immediate=true
                HelperTextOnFocus=true HelperText="Valid characters: A-Z ĂÂĂȘȚ 0-9 +-*- .?!"/>

            <div class="d-flex justify-center">
                <MudButton Color=Color.Secondary Variant=Variant.Filled StartIcon=@Icons.Filled.Translate
                    Disabled=@(input==oldInput) OnClick=UpdateDocument>Translate</MudButton>
            </div>
            
        </MudItem>
    </MudGrid>
</div>

@code
{
    string input = "This is some text written in StarGlyph", oldInput="";
    SvgDocument? document;
    string? documentContent;

    //float zoom = 100;
    //const float minZoom = 12.5f, maxZoom = 800f;

    MudChip? selectedStyle;
    int maxLineLength = 6;
    int maxWordsPerLine = 2;

    StarGlyphOptions options = StarGlyphGenerator.defaultOptions;

    void UpdateStyle(MudChip value)
    {
        options = options with { horizontalLines= value.Text switch
            {
                "Default" => false,
                "Strikethrough" => true,
                _ => throw new InvalidDataException()
            }};
        UpdateDocument();
    }

    void UpdateDocument()
    {
        oldInput = input;

        document = StarGlyphGenerator.StringToSVG(input ?? "", options);
        
        documentContent = document.GetXML();
    }

    async void DownloadDocument()
    {
        await Download.DownloadFileFromText("StarGlyph.svg", documentContent, contentType:"application/xml",  encoderShouldEmitUTF8Identifier:false);
    }

    protected override void OnInitialized()
    {
        UpdateDocument();
    }
}